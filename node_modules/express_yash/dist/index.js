"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@godspeedsystems/core");
const express_1 = __importDefault(require("express"));
const body_parser_1 = __importDefault(require("body-parser"));
const lodash_1 = __importDefault(require("lodash"));
//@ts-ignore
const passport_1 = __importDefault(require("passport"));
const passport_jwt_1 = require("passport-jwt");
const cors_1 = __importDefault(require("cors"));
class EventSource extends core_1.GSEventSource {
    initClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const app = (0, express_1.default)();
            const { port = 3000, request_body_limit = 50 * 1024 * 1024, file_size_limit = 50 * 1024 * 1024, jwt: jwtConfig } = this.config;
            app.use(body_parser_1.default.urlencoded({ extended: true, limit: request_body_limit }));
            app.use(body_parser_1.default.json({ limit: file_size_limit }));
            app.use((0, cors_1.default)());
            // passport jwt auth
            if (jwtConfig) {
                app.use(passport_1.default.initialize());
                passport_1.default.use(new passport_jwt_1.Strategy({
                    jwtFromRequest: passport_jwt_1.ExtractJwt.fromAuthHeaderAsBearerToken(),
                    secretOrKey: jwtConfig.secretOrKey,
                    ignoreExpiration: true,
                    jsonWebTokenOptions: {
                        audience: jwtConfig.audience,
                        issuer: jwtConfig.issuer,
                    },
                }, function (jwtPayload, done) {
                    return done(null, jwtPayload);
                }));
            }
            ;
            app.listen(port);
            return app;
        });
    }
    authnHOF(authn) {
        return (req, res, next) => {
            if (authn) {
                return passport_1.default.authenticate('jwt', { session: false })(req, res, next);
            }
            else {
                next();
            }
        };
    }
    ;
    subscribeToEvent(eventRoute, eventConfig, processEvent, event) {
        const routeSplit = eventRoute.split('.');
        const httpMethod = routeSplit[1];
        const endpoint = routeSplit[2].replace(/{(.*?)}/g, ':$1');
        const app = this.client;
        //@ts-ignore
        app[httpMethod](endpoint, this.authnHOF(event.authn), (req, res) => __awaiter(this, void 0, void 0, function* () {
            const gsEvent = EventSource.createGSEvent(req, endpoint);
            const status = yield processEvent(gsEvent, Object.assign({ key: eventRoute }, eventConfig));
            res
                .status(status.code || 200)
                // if data is a integer, it takes it as statusCode, so explicitly converting it to string
                .send(Number.isInteger(status.data) ? String(status.data) : status.data);
        }));
        return Promise.resolve();
    }
    static createGSEvent(req, endpoint) {
        const reqProp = lodash_1.default.omit(req, [
            '_readableState',
            'socket',
            'client',
            '_parsedUrl',
            'res',
            'app'
        ]);
        const reqHeaders = lodash_1.default.pick(req, ['headers']);
        let data = Object.assign(Object.assign({}, reqProp), reqHeaders);
        const event = new core_1.GSCloudEvent('id', endpoint, new Date(), 'http', '1.0', data, 'REST', new core_1.GSActor('user'), {});
        return event;
    }
}
exports.default = EventSource;
//# sourceMappingURL=index.js.map